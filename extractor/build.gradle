plugins {
    id 'application'
    id 'java'
    id 'pmd'
    id 'com.github.spotbugs' version '6.0.19'
    id 'de.thetaphi.forbiddenapis' version '3.7'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2' // Add Shadow plugin
}

repositories {
    mavenCentral()
}

dependencies {
    // JUnit 5 dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // Checkstyle dependencies
    implementation 'com.puppycrawl.tools:checkstyle:10.17.0'
    implementation 'com.puppycrawl.tools:checkstyle:10.17.0:tests'
    testImplementation 'com.puppycrawl.tools:checkstyle:10.17.0'
    testImplementation 'com.puppycrawl.tools:checkstyle:10.17.0:tests'

    // Google Truth for assertions
    testImplementation 'com.google.truth:truth:1.1.3'

    // YAML dependency
    implementation 'org.yaml:snakeyaml:1.30'
    testImplementation 'org.yaml:snakeyaml:1.30'
}

application {
    mainClass = 'com.example.extractor.CheckstyleExampleExtractor'
}

tasks.withType(JavaCompile) {
    //options.release = 21
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        events "passed", "skipped", "failed"
    }
}

// PMD Configuration
pmd {
    toolVersion = "7.3.0"
    ruleSets = []
    ruleSetFiles = files("${rootDir}/config/pmd/pmd-ruleset.xml")
    ignoreFailures = false
    consoleOutput = true
}

tasks.withType(Pmd) {
    reports {
        xml.required = false
        html.required = true
    }
}

// SpotBugs Configuration
spotbugs {
    ignoreFailures = false
    effort = com.github.spotbugs.snom.Effort.MAX
    excludeFilter = file("${rootDir}/config/spotbugs/spotbugs-exclude.xml")
}

// Checkstyle Configuration
checkstyle {
    toolVersion = "10.17.0"
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = false
    maxWarnings = 0
}

// Forbidden APIs Configuration
forbiddenApis {
    bundledSignatures = ['jdk-unsafe', 'jdk-deprecated']
    signaturesFiles = files("${rootDir}/config/forbidden-apis/forbidden-apis.txt")
    ignoreFailures = false
}

// Enable SpotBugs, and Checkstyle tasks
tasks.withType(com.github.spotbugs.snom.SpotBugsTask) { it.enabled = true }
tasks.withType(Checkstyle) { it.enabled = true }
tasks.withType(Pmd) { it.enabled = true }
tasks.withType(de.thetaphi.forbiddenapis.gradle.CheckForbiddenApis) { it.enabled = true }

// Shadow JAR Configuration
shadowJar {
    archiveClassifier.set('all')
}
